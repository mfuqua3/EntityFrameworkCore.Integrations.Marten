// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestingSandbox;

#nullable disable

namespace TestingSandbox.Migrations
{
    [DbContext(typeof(TestingSandboxDbContext))]
    [Migration("20230630232122_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestingSandbox.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TestingSandbox.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<JsonDocument>("data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("mt_dotnet_type")
                        .HasColumnType("varchar")
                        .HasColumnName("mt_dotnet_type");

                    b.Property<DateTimeOffset>("mt_last_modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("mt_last_modified");

                    b.Property<Guid>("mt_version")
                        .HasColumnType("uuid")
                        .HasColumnName("mt_version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "data" }, "mt_doc_invoice_idx_amount")
                        .HasAnnotation("MartenComputedIndex:Casing", 0)
                        .HasAnnotation("MartenComputedIndex:Collation", null)
                        .HasAnnotation("MartenComputedIndex:Columns", new[] { "(CAST(data ->> 'Amount' as integer))" })
                        .HasAnnotation("MartenComputedIndex:CustomMethod", null)
                        .HasAnnotation("MartenComputedIndex:IncludeColumns", null)
                        .HasAnnotation("MartenComputedIndex:IsConcurrent", false)
                        .HasAnnotation("MartenComputedIndex:IsUnique", false)
                        .HasAnnotation("MartenComputedIndex:Mask", null)
                        .HasAnnotation("MartenComputedIndex:Method", 0)
                        .HasAnnotation("MartenComputedIndex:Name", "mt_doc_invoice_idx_amount")
                        .HasAnnotation("MartenComputedIndex:NullsSortOrder", 0)
                        .HasAnnotation("MartenComputedIndex:Predicate", null)
                        .HasAnnotation("MartenComputedIndex:SortOrder", 0)
                        .HasAnnotation("MartenComputedIndex:TableSpace", null)
                        .HasAnnotation("MartenComputedIndex:TenancyScope", 0)
                        .HasAnnotation("MartenIndexType", "ComputedIndex");

                    b.ToTable("mt_doc_invoice", "public");

                    b.HasAnnotation("EntityGenerationStrategy", "Marten");
                });

            modelBuilder.Entity("TestingSandbox.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TestingSandbox.Order", b =>
                {
                    b.HasOne("TestingSandbox.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TestingSandbox.Customer", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
